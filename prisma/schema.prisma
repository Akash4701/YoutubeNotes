// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id    String   @id @unique
  email  String @unique
  password String
  name String
  skills String[]
  youtube_url  String? @unique
  avgRating  Float?
  totalLikes  Int? @default(0)
  notes Note[]
  comments Comment[]
  likes Like[]
  connections Connection[] @relation("ReceiverUser")
  connectedTo Connection[] @relation("ConnectedUser")

}
model Note{
   id    String   @id @default(uuid())
   title String
   youtube_url String
   description String?
   likes Like[]
   likedByMe  Boolean?
   likesCount  Int? @default(0)

   contentCreater  String?
   channelName String?
   thumbnail String?
   author String?
    pdf_url String
    userId String
    user  User @relation(fields:[userId],references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt  
    comments Comment[]
}
  model Like{
    id String @id @default(uuid())
     userId String
    user  User @relation(fields:[userId],references: [id])
     noteId String
    note  Note @relation(fields:[noteId],references: [id])
    liked Boolean @default(false)

    @@unique([userId,noteId])



  }
 model Comment {
  id        String    @id @default(uuid())
  content   String

  // Author relation
  authorId  String
  author    User      @relation(fields: [authorId], references: [id])

  // Post/Note relation
  noteId    String
  note      Note      @relation(fields: [noteId], references: [id])

  
  parentId  String?   
  parent    Comment?  @relation("CommentToReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentToReplies")

  createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt 
}

   model Connection{
    id Int @id @default(autoincrement())
    userId String
    receiverUser User @relation("ReceiverUser", fields:[userId], references: [id])
    connectedUserId String
    connectedUser User @relation("ConnectedUser", fields:[connectedUserId], references: [id])
    createdAt DateTime @default(now())
   }




